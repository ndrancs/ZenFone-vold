diff --git a/Android.mk b/Android.mk
index 1a1d28a..206147c 100644
--- a/Android.mk
+++ b/Android.mk
@@ -1,5 +1,21 @@
 LOCAL_PATH:= $(call my-dir)
 
+common_cflags := \
+	-Werror=format \
+	-Wno-unused-parameter
+
+ifneq ($(BOARD_VOLD_MAX_PARTITIONS),)
+	common_cflags += -DVOLD_MAX_PARTITIONS=$(BOARD_VOLD_MAX_PARTITIONS)
+endif
+
+ifeq ($(BOARD_VOLD_EMMC_SHARES_DEV_MAJOR), true)
+	common_cflags += -DVOLD_EMMC_SHARES_DEV_MAJOR
+endif
+
+ifeq ($(BOARD_VOLD_DISC_HAS_MULTIPLE_MAJORS), true)
+	common_cflags += -DVOLD_DISC_HAS_MULTIPLE_MAJORS
+endif
+
 common_src_files := \
 	VolumeManager.cpp \
 	CommandListener.cpp \
@@ -11,6 +27,8 @@ common_src_files := \
 	Process.cpp \
 	Ext4.cpp \
 	Fat.cpp \
+	Ntfs.cpp \
+	Exfat.cpp \
 	Loop.cpp \
 	Devmapper.cpp \
 	ResponseCode.cpp \
@@ -29,7 +47,8 @@ common_c_includes := \
 	frameworks/native/include \
 	system/security/keystore \
 	hardware/libhardware/include/hardware \
-	system/security/softkeymaster/include/keymaster
+	system/security/softkeymaster/include/keymaster \
+	external/e2fsprogs/lib
 
 common_shared_libraries := \
 	libsysutils \
@@ -46,7 +65,8 @@ common_shared_libraries := \
 	libselinux \
 	libutils \
 	libhardware \
-	libsoftkeymaster
+	libsoftkeymaster \
+	libext2_blkid
 
 common_static_libraries := \
 	libfs_mgr \
@@ -55,23 +75,16 @@ common_static_libraries := \
 	libbatteryservice
 
 include $(CLEAR_VARS)
-
 LOCAL_MODULE := libvold
-
 LOCAL_SRC_FILES := $(common_src_files)
-
 LOCAL_C_INCLUDES := $(common_c_includes)
-
 LOCAL_SHARED_LIBRARIES := $(common_shared_libraries)
-
 LOCAL_STATIC_LIBRARIES := $(common_static_libraries)
-
+LOCAL_CFLAGS := $(common_cflags)
 LOCAL_MODULE_TAGS := eng tests
-
 include $(BUILD_STATIC_LIBRARY)
 
 include $(CLEAR_VARS)
-
 LOCAL_MODULE:= vold
 
 LOCAL_SRC_FILES := \
@@ -79,25 +92,15 @@ LOCAL_SRC_FILES := \
 	$(common_src_files)
 
 LOCAL_C_INCLUDES := $(common_c_includes)
-
-LOCAL_CFLAGS := -Werror=format
-
+LOCAL_CFLAGS := $(common_cflags)
 LOCAL_SHARED_LIBRARIES := $(common_shared_libraries)
-
 LOCAL_STATIC_LIBRARIES := $(common_static_libraries)
-
 include $(BUILD_EXECUTABLE)
 
 include $(CLEAR_VARS)
-
 LOCAL_SRC_FILES:= vdc.c
-
 LOCAL_MODULE:= vdc
-
 LOCAL_C_INCLUDES :=
-
 LOCAL_CFLAGS := 
-
 LOCAL_SHARED_LIBRARIES := libcutils
-
 include $(BUILD_EXECUTABLE)
diff --git a/DirectVolume.cpp b/DirectVolume.cpp
index cfa1e0b..5eac87f 100644
--- a/DirectVolume.cpp
+++ b/DirectVolume.cpp
@@ -115,6 +115,14 @@ dev_t DirectVolume::getDiskDevice() {
 
 dev_t DirectVolume::getShareDevice() {
     if (mPartIdx != -1) {
+#ifdef VOLD_DISC_HAS_MULTIPLE_MAJORS
+        int major = getMajorNumberForBadPartition(mPartIdx);
+        if(major != -1) {
+            SLOGE("getShareDevice() returning correct major: %d, minor: %d", major, mPartMinors[mPartIdx - 1]);
+            return MKDEV(major, mPartMinors[mPartIdx - 1]);
+        }
+        else
+#endif
         return MKDEV(mDiskMajor, mPartIdx);
     } else {
         return MKDEV(mDiskMajor, mDiskMinor);
@@ -203,8 +211,6 @@ void DirectVolume::handleDiskAdded(const char * /*devpath*/,
     }
 
     mPendingPartCount = mDiskNumParts;
-    for (int i = 0; i < MAX_PARTITIONS; i++)
-        mPartMinors[i] = -1;
 
     if (mDiskNumParts == 0) {
 #ifdef PARTITION_DEBUG
@@ -234,6 +240,8 @@ void DirectVolume::handlePartitionAdded(const char *devpath, NetlinkEvent *evt)
         part_num = 1;
     }
 
+    SLOGD("DirectVolume::handlePartitionAdded -> MAJOR %d, MINOR %d, PARTN %d\n", major, minor, part_num);
+
     if (part_num > MAX_PARTITIONS || part_num < 1) {
         SLOGE("Invalid 'PARTN' value");
         return;
@@ -245,13 +253,20 @@ void DirectVolume::handlePartitionAdded(const char *devpath, NetlinkEvent *evt)
 
     if (major != mDiskMajor) {
         SLOGE("Partition '%s' has a different major than its disk!", devpath);
+#ifdef VOLD_DISC_HAS_MULTIPLE_MAJORS
+        ValuePair vp;
+        vp.major = major;
+        vp.part_num = part_num;
+        badPartitions.push_back(vp);
+#else
         return;
+#endif
     }
 #ifdef PARTITION_DEBUG
     SLOGD("Dv:partAdd: part_num = %d, minor = %d\n", part_num, minor);
 #endif
-    if (part_num >= MAX_PARTITIONS) {
-        SLOGE("Dv:partAdd: ignoring part_num = %d (max: %d)\n", part_num, MAX_PARTITIONS-1);
+    if (part_num > MAX_PARTITIONS) {
+        SLOGE("Dv:partAdd: ignoring part_num = %d (max: %d)\n", part_num, MAX_PARTITIONS);
     } else {
         if ((mPartMinors[part_num - 1] == -1) && mPendingPartCount)
             mPendingPartCount--;
@@ -330,6 +345,8 @@ void DirectVolume::handleDiskRemoved(const char * /*devpath*/,
              getLabel(), getFuseMountpoint(), major, minor);
     mVm->getBroadcaster()->sendBroadcast(ResponseCode::VolumeDiskRemoved,
                                              msg, false);
+    for (int i = 0; i < MAX_PARTITIONS; i++)
+        mPartMinors[i] = -1;
     setState(Volume::State_NoMedia);
 }
 
@@ -400,6 +417,7 @@ int DirectVolume::getDeviceNodes(dev_t *devs, int max) {
         // If the disk has no partitions, try the disk itself
         if (!mDiskNumParts) {
             devs[0] = MKDEV(mDiskMajor, mDiskMinor);
+            SLOGD("Disc has only one partition.");
             return 1;
         }
 
@@ -407,14 +425,53 @@ int DirectVolume::getDeviceNodes(dev_t *devs, int max) {
         for (i = 0; i < mDiskNumParts; i++) {
             if (i == max)
                 break;
+#ifdef VOLD_DISC_HAS_MULTIPLE_MAJORS
+            int major = getMajorNumberForBadPartition(i + 1);
+            if(major != -1) {
+                SLOGE("Fixing major number from %d to %d for partition %d", mDiskMajor, major, i + 1);
+                devs[i] = MKDEV(major, mPartMinors[i]);
+            }
+            else
+#endif
             devs[i] = MKDEV(mDiskMajor, mPartMinors[i]);
         }
         return mDiskNumParts;
     }
+#ifdef VOLD_DISC_HAS_MULTIPLE_MAJORS
+    int major = getMajorNumberForBadPartition(mPartIdx);
+    if(major != -1) {
+        SLOGE("Fixing major number from %d to %d for partition %d", mDiskMajor, major, mPartIdx);
+        devs[0] = MKDEV(major, mPartMinors[mPartIdx - 1]);
+    }
+    else
+#endif
     devs[0] = MKDEV(mDiskMajor, mPartMinors[mPartIdx -1]);
     return 1;
 }
 
+#ifdef VOLD_DISC_HAS_MULTIPLE_MAJORS
+/*
+ * Returns the correct major number for a bad partition.
+ * Returns -1 if the partition is good.
+ */
+int DirectVolume::getMajorNumberForBadPartition(int part_num) {
+    SLOGD("Checking for bad partition major number");
+    bool found = false;
+    android::List<ValuePair>::iterator iterator = badPartitions.begin();
+    for(;iterator != badPartitions.end(); iterator++) {
+        if((*iterator).part_num == part_num) {
+            found = true;
+            SLOGD("Found bad partition");
+            break;
+        }
+    }
+    if(found == true)
+        return (*iterator).major;
+    else
+        return -1;
+}
+#endif
+
 /*
  * Called from base to update device info,
  * e.g. When setting up an dm-crypt mapping for the sd card.
diff --git a/DirectVolume.h b/DirectVolume.h
index 5e0df74..7172599 100644
--- a/DirectVolume.h
+++ b/DirectVolume.h
@@ -21,6 +21,10 @@
 
 #include "Volume.h"
 
+#ifndef VOLD_MAX_PARTITIONS
+#define VOLD_MAX_PARTITIONS 32
+#endif
+
 class PathInfo {
 public:
 	PathInfo(const char *pattern);
@@ -37,7 +41,7 @@ typedef android::List<PathInfo *> PathCollection;
 
 class DirectVolume : public Volume {
 public:
-    static const int MAX_PARTITIONS = 32;
+    static const int MAX_PARTITIONS = VOLD_MAX_PARTITIONS;
 protected:
     const char* mMountpoint;
     const char* mFuseMountpoint;
@@ -53,6 +57,16 @@ protected:
     int            mPendingPartCount;
     int            mIsDecrypted;
 
+#ifdef VOLD_DISC_HAS_MULTIPLE_MAJORS
+private:
+    struct ValuePair {
+        int major;
+        int part_num;
+    };
+
+    android::List<ValuePair> badPartitions;
+#endif
+
 public:
     DirectVolume(VolumeManager *vm, const fstab_rec* rec, int flags);
     virtual ~DirectVolume();
@@ -84,6 +98,9 @@ private:
     void handlePartitionChanged(const char *devpath, NetlinkEvent *evt);
 
     int doMountVfat(const char *deviceNode, const char *mountPoint);
+#ifdef VOLD_DISC_HAS_MULTIPLE_MAJORS
+    int getMajorNumberForBadPartition(int part_num);
+#endif
 
 };
 
diff --git a/Ext4.cpp b/Ext4.cpp
index dc31fd0..878f9cd 100644
--- a/Ext4.cpp
+++ b/Ext4.cpp
@@ -43,8 +43,9 @@
 #include "Ext4.h"
 #include "VoldUtil.h"
 
-#define MKEXT4FS_PATH "/system/bin/make_ext4fs"
-#define RESIZE2FS_PATH "/system/bin/resize2fs"
+static char E2FSCK_PATH[] = "/system/bin/e2fsck";
+static char RESIZE2FS_PATH[] = "/system/bin/resize2fs";
+static char MKEXT4FS_PATH[] = "/system/bin/make_ext4fs";
 
 int Ext4::doMount(const char *fsPath, const char *mountPoint, bool ro, bool remount,
         bool executable) {
@@ -68,6 +69,53 @@ int Ext4::doMount(const char *fsPath, const char *mountPoint, bool ro, bool remo
     return rc;
 }
 
+int Ext4::check(const char *fsPath) {
+    bool rw = true;
+    if (access(E2FSCK_PATH, X_OK)) {
+        SLOGW("Skipping fs checks.\n");
+        return 0;
+    }
+
+    int rc = -1;
+    int status;
+    do {
+        const char *args[5];
+        args[0] = E2FSCK_PATH;
+        args[1] = "-p";
+        args[2] = "-f";
+        args[3] = fsPath;
+        args[4] = NULL;
+
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+        switch(rc) {
+        case 0:
+            SLOGI("EXT4 Filesystem check completed OK.\n");
+            return 0;
+        case 1:
+            SLOGI("EXT4 Filesystem check completed, errors corrected OK.\n");
+            return 0;
+        case 2:
+            SLOGE("EXT4 Filesystem check completed, errors corrected, need reboot.\n");
+            return 0;
+        case 4:
+            SLOGE("EXT4 Filesystem errors left uncorrected.\n");
+            return 0;
+        case 8:
+            SLOGE("E2FSCK Operational error.\n");
+            errno = EIO;
+            return -1;
+        default:
+            SLOGE("EXT4 Filesystem check failed (unknown exit code %d).\n", rc);
+            errno = EIO;
+            return -1;
+        }
+    } while (0);
+
+    return 0;
+}
+
 int Ext4::resize(const char *fspath, unsigned int numSectors) {
     const char *args[4];
     char* size_str;
diff --git a/Ext4.h b/Ext4.h
index c768f5a..5b01a53 100644
--- a/Ext4.h
+++ b/Ext4.h
@@ -23,6 +23,7 @@ class Ext4 {
 public:
     static int doMount(const char *fsPath, const char *mountPoint, bool ro, bool remount,
             bool executable);
+    static int check(const char *fsPath);
     static int format(const char *fsPath, unsigned int numSectors, const char *mountpoint);
     static int resize(const char *fsPath, unsigned int numSectors);
 };
diff --git a/VoldUtil.h b/VoldUtil.h
index 469489a..c2cf9ca 100644
--- a/VoldUtil.h
+++ b/VoldUtil.h
@@ -19,6 +19,10 @@
 
 #include <sys/cdefs.h>
 
+#ifndef HELPER_PATH
+#define HELPER_PATH "/system/bin/"
+#endif
+
 #define ARRAY_SIZE(a) (sizeof(a) / sizeof(*(a)))
 
 __BEGIN_DECLS
diff --git a/Volume.cpp b/Volume.cpp
index ca56d1c..403fff1 100644
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -35,6 +35,8 @@
 
 #include <private/android_filesystem_config.h>
 
+#include <blkid/blkid.h>
+
 #define LOG_TAG "Vold"
 
 #include <cutils/fs.h>
@@ -45,9 +47,13 @@
 #include "Volume.h"
 #include "VolumeManager.h"
 #include "ResponseCode.h"
+#include "Ext4.h"
 #include "Fat.h"
+#include "Exfat.h"
+#include "Ntfs.h"
 #include "Process.h"
 #include "cryptfs.h"
+#include "VoldUtil.h"
 
 extern "C" void dos_partition_dec(void const *pp, struct dos_partition *d);
 extern "C" void dos_partition_enc(void *pp, struct dos_partition *d);
@@ -141,6 +147,22 @@ dev_t Volume::getShareDevice() {
     return getDiskDevice();
 }
 
+char *getFsType(const char * devicePath) {
+    char *fstype = NULL;
+
+    SLOGD("Trying to get filesystem type for %s \n", devicePath);
+
+    fstype = blkid_get_tag_value(NULL, "TYPE", devicePath);
+    if (fstype) {
+        SLOGD("Found %s filesystem on %s\n", fstype, devicePath);
+    } else {
+        SLOGE("None or unknown filesystem on %s\n", devicePath);
+        return NULL;
+    }
+
+    return fstype;
+}
+
 void Volume::handleVolumeShared() {
 }
 
@@ -231,6 +253,8 @@ int Volume::createDeviceNode(const char *path, int major, int minor) {
 
 int Volume::formatVol(bool wipe) {
 
+    char* fstype = NULL;
+
     if (getState() == Volume::State_NoMedia) {
         errno = ENODEV;
         return -1;
@@ -271,16 +295,36 @@ int Volume::formatVol(bool wipe) {
     sprintf(devicePath, "/dev/block/vold/%d:%d",
             major(partNode), minor(partNode));
 
+    fstype = getFsType((const char*)devicePath);
+
+#ifdef VOLD_EMMC_SHARES_DEV_MAJOR
+    // If emmc and sdcard share dev major number, vold may pick
+    // incorrectly based on partition nodes alone, formatting
+    // the wrong device. Use device nodes instead.
+    dev_t deviceNodes;
+    getDeviceNodes((dev_t *) &deviceNodes, 1);
+    sprintf(devicePath, "/dev/block/vold/%d:%d", major(deviceNodes), minor(deviceNodes));
+#endif
+
     if (mDebug) {
-        SLOGI("Formatting volume %s (%s)", getLabel(), devicePath);
+        SLOGI("Formatting volume %s (%s) as %s", getLabel(), devicePath, fstype);
     }
 
-    if (Fat::format(devicePath, 0, wipe)) {
+    if (strcmp(fstype, "ext4") == 0) {
+        ret = Ext4::format(devicePath, 0, NULL);
+    } else if (strcmp(fstype, "exfat") == 0) {
+        ret = Exfat::format(devicePath);
+    } else if (strcmp(fstype, "ntfs") == 0) {
+        ret = Ntfs::format(devicePath, wipe);
+    } else {
+        ret = Fat::format(devicePath, 0, wipe);
+    }
+
+    if (ret < 0) {
         SLOGE("Failed to format (%s)", strerror(errno));
-        goto err;
     }
 
-    ret = 0;
+    free(fstype);
 
 err:
     setState(Volume::State_Idle);
@@ -414,6 +458,7 @@ int Volume::mountVol() {
 
     for (i = 0; i < n; i++) {
         char devicePath[255];
+        char *fstype = NULL;
 
         sprintf(devicePath, "/dev/block/vold/%d:%d", major(deviceNodes[i]),
                 minor(deviceNodes[i]));
@@ -423,25 +468,101 @@ int Volume::mountVol() {
         errno = 0;
         setState(Volume::State_Checking);
 
-        if (Fat::check(devicePath)) {
-            if (errno == ENODATA) {
-                SLOGW("%s does not contain a FAT filesystem\n", devicePath);
+        errno = 0;
+        int gid;
+
+        fstype = getFsType((const char *)devicePath);
+
+        if (fstype != NULL) {
+            if (strcmp(fstype, "vfat") == 0) {
+
+                if (Fat::check(devicePath)) {
+                    errno = EIO;
+                    /* Badness - abort the mount */
+                    SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+                    setState(Volume::State_Idle);
+                    free(fstype);
+                    return -1;
+                }
+
+                if (Fat::doMount(devicePath, getMountpoint(), false, false, false,
+                            AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
+                    SLOGE("%s failed to mount via VFAT (%s)\n", devicePath, strerror(errno));
+                    continue;
+                }
+            } else if (strcmp(fstype, "ext4") == 0) {
+
+                if (Ext4::check(devicePath)) {
+                    errno = EIO;
+                    /* Badness - abort the mount */
+                    SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+                    setState(Volume::State_Idle);
+                    free(fstype);
+                    return -1;
+                }
+
+                if (Ext4::doMount(devicePath, getMountpoint(), false, false, false)) {
+                    SLOGE("%s failed to mount via EXT4 (%s)\n", devicePath, strerror(errno));
+                    continue;
+                }
+            } else if (strcmp(fstype, "ntfs") == 0) {
+
+                if (Ntfs::doMount(devicePath, getMountpoint(), false, false, false,
+                            AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
+                    SLOGE("%s failed to mount via NTFS (%s)\n", devicePath, strerror(errno));
+                    continue;
+                }
+
+            } else if (strcmp(fstype, "exfat") == 0) {
+
+                if (Exfat::check(devicePath)) {
+                    errno = EIO;
+                    /* Badness - abort the mount */
+                    SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+                    setState(Volume::State_Idle);
+                    free(fstype);
+                    return -1;
+                }
+
+                if (Exfat::doMount(devicePath, getMountpoint(), false, false, false,
+                        AID_MEDIA_RW, AID_MEDIA_RW, 0007)) {
+                    SLOGE("%s failed to mount via EXFAT (%s)\n", devicePath, strerror(errno));
+                    continue;
+                }
+
+            } else {
+                // Unsupported filesystem
+                errno = ENODATA;
+                setState(Volume::State_Idle);
+                free(fstype);
+                return -1;
+            }
+
+            free(fstype);
+
+        } else {
+            if (Exfat::check(devicePath)) {
+                errno = EIO;
+                /* Badness - abort the mount */
+                SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+                setState(Volume::State_Idle);
+                free(fstype);
+                return -1;
+            }
+
+            if (Exfat::doMount(devicePath, getMountpoint(), false, false, false,
+                    AID_MEDIA_RW, AID_MEDIA_RW, 0007)) {
+                SLOGE("%s failed to mount via EXFAT (%s)\n", devicePath, strerror(errno));
                 continue;
             }
-            errno = EIO;
-            /* Badness - abort the mount */
-            SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+
+            // Unsupported filesystem
+/*
+            errno = ENODATA;
             setState(Volume::State_Idle);
+            free(fstype);
             return -1;
-        }
-
-        errno = 0;
-        int gid;
-
-        if (Fat::doMount(devicePath, getMountpoint(), false, false, false,
-                AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
-            SLOGE("%s failed to mount via VFAT (%s)\n", devicePath, strerror(errno));
-            continue;
+            */
         }
 
         extractMetadata(devicePath);
diff --git a/Volume.h b/Volume.h
index 1444ed3..0be5865 100644
--- a/Volume.h
+++ b/Volume.h
@@ -89,13 +89,13 @@ public:
 
     void setDebug(bool enable);
     virtual int getVolInfo(struct volume_info *v) = 0;
+    virtual int getDeviceNodes(dev_t *devs, int max) = 0;
 
 protected:
     void setUuid(const char* uuid);
     void setUserLabel(const char* userLabel);
     void setState(int state);
 
-    virtual int getDeviceNodes(dev_t *devs, int max) = 0;
     virtual int updateDeviceInfo(char *new_path, int new_major, int new_minor) = 0;
     virtual void revertDeviceInfo(void) = 0;
     virtual int isDecrypted(void) = 0;
diff --git a/VolumeManager.cpp b/VolumeManager.cpp
index 14f1509..24ac898 100644
--- a/VolumeManager.cpp
+++ b/VolumeManager.cpp
@@ -1572,6 +1572,17 @@ int VolumeManager::shareVolume(const char *label, const char *method) {
         return -1;
     }
 
+#ifdef VOLD_EMMC_SHARES_DEV_MAJOR
+    // If emmc and sdcard share dev major number, vold may pick
+    // incorrectly based on partition nodes alone. Use device nodes instead.
+    v->getDeviceNodes((dev_t *) &d, 1);
+    if ((MAJOR(d) == 0) && (MINOR(d) == 0)) {
+        // This volume does not support raw disk access
+        errno = EINVAL;
+        return -1;
+    }
+#endif
+
     int fd;
     char nodepath[255];
     int written = snprintf(nodepath,
diff --git a/main.cpp b/main.cpp
index d4b7d28..fac8a77 100644
--- a/main.cpp
+++ b/main.cpp
@@ -20,6 +20,7 @@
 #include <string.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <ctype.h>
 
 #include <fcntl.h>
 #include <dirent.h>
@@ -185,6 +186,7 @@ static int process_config(VolumeManager *vm)
             if (fs_mgr_is_noemulatedsd(&fstab->recs[i]) &&
                 !strcmp(fstab->recs[i].fs_type, "vfat")) {
                 flags |= VOL_PROVIDES_ASEC;
+                property_set("ro.bsp.app2sd", "true");
             }
             dv = new DirectVolume(vm, &(fstab->recs[i]), flags);
 
@@ -194,6 +196,12 @@ static int process_config(VolumeManager *vm)
                 goto out_fail;
             }
 
+            snprintf(propbuf, sizeof(propbuf), "ro.epad.mount_point.%s", dv->getLabel());
+            for (int i = 0; propbuf[i]; i++) {
+                propbuf[i] = tolower(propbuf[i]);
+            }
+            property_set(propbuf, dv->getFuseMountpoint());
+
             vm->addVolume(dv);
         }
     }
